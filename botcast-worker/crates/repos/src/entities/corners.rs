//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.10

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "corners")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    #[sea_orm(column_type = "Text")]
    pub title: String,
    #[sea_orm(column_type = "Text")]
    pub description: String,
    pub requesting_mail: bool,
    pub user_id: Uuid,
    #[sea_orm(column_type = "JsonBinary")]
    pub mail_schema: Json,
    pub podcast_id: Uuid,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::mails::Entity")]
    Mails,
    #[sea_orm(
        belongs_to = "super::podcasts::Entity",
        from = "Column::PodcastId",
        to = "super::podcasts::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Podcasts,
    #[sea_orm(
        belongs_to = "super::users::Entity",
        from = "Column::UserId",
        to = "super::users::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Users,
}

impl Related<super::mails::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Mails.def()
    }
}

impl Related<super::podcasts::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Podcasts.def()
    }
}

impl Related<super::users::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Users.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
