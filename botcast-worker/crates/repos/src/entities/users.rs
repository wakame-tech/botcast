//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.10

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "users")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    #[sea_orm(column_type = "Text", unique)]
    pub auth_id: String,
    #[sea_orm(column_type = "Text", unique)]
    pub email: String,
    #[sea_orm(column_type = "Text", nullable)]
    pub name: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::corners::Entity")]
    Corners,
    #[sea_orm(has_many = "super::episodes::Entity")]
    Episodes,
    #[sea_orm(has_many = "super::mails::Entity")]
    Mails,
    #[sea_orm(has_many = "super::podcasts::Entity")]
    Podcasts,
    #[sea_orm(has_many = "super::scripts::Entity")]
    Scripts,
    #[sea_orm(has_many = "super::tasks::Entity")]
    Tasks,
}

impl Related<super::corners::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Corners.def()
    }
}

impl Related<super::episodes::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Episodes.def()
    }
}

impl Related<super::mails::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Mails.def()
    }
}

impl Related<super::podcasts::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Podcasts.def()
    }
}

impl Related<super::scripts::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Scripts.def()
    }
}

impl Related<super::tasks::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Tasks.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
