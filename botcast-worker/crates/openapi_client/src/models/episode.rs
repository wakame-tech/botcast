/*
 * botcast API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Episode {
    #[serde(rename = "id")]
    pub id: uuid::Uuid,
    #[serde(rename = "title")]
    pub title: String,
    #[serde(rename = "sections")]
    pub sections: Vec<models::Section>,
    #[serde(rename = "audio_url", skip_serializing_if = "Option::is_none")]
    pub audio_url: Option<String>,
    #[serde(rename = "srt_url", skip_serializing_if = "Option::is_none")]
    pub srt_url: Option<String>,
    #[serde(rename = "created_at")]
    pub created_at: String,
    #[serde(rename = "description")]
    pub description: String,
    #[serde(rename = "duration_sec", skip_serializing_if = "Option::is_none")]
    pub duration_sec: Option<f64>,
}

impl Episode {
    pub fn new(id: uuid::Uuid, title: String, sections: Vec<models::Section>, created_at: String, description: String) -> Episode {
        Episode {
            id,
            title,
            sections,
            audio_url: None,
            srt_url: None,
            created_at,
            description,
            duration_sec: None,
        }
    }
}

