/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ScriptsIndexImport } from './routes/scripts/index'

// Create Virtual Routes

const TasksLazyImport = createFileRoute('/tasks')()
const SigninLazyImport = createFileRoute('/signin')()
const IndexLazyImport = createFileRoute('/')()
const PodcastsIndexLazyImport = createFileRoute('/podcasts/')()
const UsersUserIdLazyImport = createFileRoute('/users/$userId')()
const ScriptsNewLazyImport = createFileRoute('/scripts/new')()
const ScriptsScriptIdLazyImport = createFileRoute('/scripts/$scriptId')()
const PodcastsNewLazyImport = createFileRoute('/podcasts/new')()
const PodcastsPodcastIdLazyImport = createFileRoute('/podcasts/$podcastId')()
const CornersCornerIdLazyImport = createFileRoute('/corners/$cornerId')()
const ScriptsScriptIdEditLazyImport = createFileRoute(
  '/scripts/$scriptId/edit',
)()
const PodcastsPodcastIdEditLazyImport = createFileRoute(
  '/podcasts/$podcastId/edit',
)()
const CornersCornerIdNewMailLazyImport = createFileRoute(
  '/corners/$cornerId/newMail',
)()
const PodcastsPodcastIdEpisodesEpisodeIdLazyImport = createFileRoute(
  '/podcasts/$podcastId/episodes/$episodeId',
)()

// Create/Update Routes

const TasksLazyRoute = TasksLazyImport.update({
  path: '/tasks',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/tasks.lazy').then((d) => d.Route))

const SigninLazyRoute = SigninLazyImport.update({
  path: '/signin',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/signin.lazy').then((d) => d.Route))

const IndexLazyRoute = IndexLazyImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const PodcastsIndexLazyRoute = PodcastsIndexLazyImport.update({
  path: '/podcasts/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/podcasts/index.lazy').then((d) => d.Route),
)

const ScriptsIndexRoute = ScriptsIndexImport.update({
  path: '/scripts/',
  getParentRoute: () => rootRoute,
} as any)

const UsersUserIdLazyRoute = UsersUserIdLazyImport.update({
  path: '/users/$userId',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/users/$userId.lazy').then((d) => d.Route))

const ScriptsNewLazyRoute = ScriptsNewLazyImport.update({
  path: '/scripts/new',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/scripts/new.lazy').then((d) => d.Route))

const ScriptsScriptIdLazyRoute = ScriptsScriptIdLazyImport.update({
  path: '/scripts/$scriptId',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/scripts/$scriptId.lazy').then((d) => d.Route),
)

const PodcastsNewLazyRoute = PodcastsNewLazyImport.update({
  path: '/podcasts/new',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/podcasts/new.lazy').then((d) => d.Route))

const PodcastsPodcastIdLazyRoute = PodcastsPodcastIdLazyImport.update({
  path: '/podcasts/$podcastId',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/podcasts/$podcastId.lazy').then((d) => d.Route),
)

const CornersCornerIdLazyRoute = CornersCornerIdLazyImport.update({
  path: '/corners/$cornerId',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/corners/$cornerId.lazy').then((d) => d.Route),
)

const ScriptsScriptIdEditLazyRoute = ScriptsScriptIdEditLazyImport.update({
  path: '/scripts/$scriptId/edit',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/scripts/$scriptId_/edit.lazy').then((d) => d.Route),
)

const PodcastsPodcastIdEditLazyRoute = PodcastsPodcastIdEditLazyImport.update({
  path: '/podcasts/$podcastId/edit',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/podcasts/$podcastId_/edit.lazy').then((d) => d.Route),
)

const CornersCornerIdNewMailLazyRoute = CornersCornerIdNewMailLazyImport.update(
  {
    path: '/corners/$cornerId/newMail',
    getParentRoute: () => rootRoute,
  } as any,
).lazy(() =>
  import('./routes/corners/$cornerId_/newMail.lazy').then((d) => d.Route),
)

const PodcastsPodcastIdEpisodesEpisodeIdLazyRoute =
  PodcastsPodcastIdEpisodesEpisodeIdLazyImport.update({
    path: '/podcasts/$podcastId/episodes/$episodeId',
    getParentRoute: () => rootRoute,
  } as any).lazy(() =>
    import('./routes/podcasts/$podcastId_/episodes/$episodeId.lazy').then(
      (d) => d.Route,
    ),
  )

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/signin': {
      id: '/signin'
      path: '/signin'
      fullPath: '/signin'
      preLoaderRoute: typeof SigninLazyImport
      parentRoute: typeof rootRoute
    }
    '/tasks': {
      id: '/tasks'
      path: '/tasks'
      fullPath: '/tasks'
      preLoaderRoute: typeof TasksLazyImport
      parentRoute: typeof rootRoute
    }
    '/corners/$cornerId': {
      id: '/corners/$cornerId'
      path: '/corners/$cornerId'
      fullPath: '/corners/$cornerId'
      preLoaderRoute: typeof CornersCornerIdLazyImport
      parentRoute: typeof rootRoute
    }
    '/podcasts/$podcastId': {
      id: '/podcasts/$podcastId'
      path: '/podcasts/$podcastId'
      fullPath: '/podcasts/$podcastId'
      preLoaderRoute: typeof PodcastsPodcastIdLazyImport
      parentRoute: typeof rootRoute
    }
    '/podcasts/new': {
      id: '/podcasts/new'
      path: '/podcasts/new'
      fullPath: '/podcasts/new'
      preLoaderRoute: typeof PodcastsNewLazyImport
      parentRoute: typeof rootRoute
    }
    '/scripts/$scriptId': {
      id: '/scripts/$scriptId'
      path: '/scripts/$scriptId'
      fullPath: '/scripts/$scriptId'
      preLoaderRoute: typeof ScriptsScriptIdLazyImport
      parentRoute: typeof rootRoute
    }
    '/scripts/new': {
      id: '/scripts/new'
      path: '/scripts/new'
      fullPath: '/scripts/new'
      preLoaderRoute: typeof ScriptsNewLazyImport
      parentRoute: typeof rootRoute
    }
    '/users/$userId': {
      id: '/users/$userId'
      path: '/users/$userId'
      fullPath: '/users/$userId'
      preLoaderRoute: typeof UsersUserIdLazyImport
      parentRoute: typeof rootRoute
    }
    '/scripts/': {
      id: '/scripts/'
      path: '/scripts'
      fullPath: '/scripts'
      preLoaderRoute: typeof ScriptsIndexImport
      parentRoute: typeof rootRoute
    }
    '/podcasts/': {
      id: '/podcasts/'
      path: '/podcasts'
      fullPath: '/podcasts'
      preLoaderRoute: typeof PodcastsIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/corners/$cornerId/newMail': {
      id: '/corners/$cornerId/newMail'
      path: '/corners/$cornerId/newMail'
      fullPath: '/corners/$cornerId/newMail'
      preLoaderRoute: typeof CornersCornerIdNewMailLazyImport
      parentRoute: typeof rootRoute
    }
    '/podcasts/$podcastId/edit': {
      id: '/podcasts/$podcastId/edit'
      path: '/podcasts/$podcastId/edit'
      fullPath: '/podcasts/$podcastId/edit'
      preLoaderRoute: typeof PodcastsPodcastIdEditLazyImport
      parentRoute: typeof rootRoute
    }
    '/scripts/$scriptId/edit': {
      id: '/scripts/$scriptId/edit'
      path: '/scripts/$scriptId/edit'
      fullPath: '/scripts/$scriptId/edit'
      preLoaderRoute: typeof ScriptsScriptIdEditLazyImport
      parentRoute: typeof rootRoute
    }
    '/podcasts/$podcastId/episodes/$episodeId': {
      id: '/podcasts/$podcastId/episodes/$episodeId'
      path: '/podcasts/$podcastId/episodes/$episodeId'
      fullPath: '/podcasts/$podcastId/episodes/$episodeId'
      preLoaderRoute: typeof PodcastsPodcastIdEpisodesEpisodeIdLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren({
  IndexLazyRoute,
  SigninLazyRoute,
  TasksLazyRoute,
  CornersCornerIdLazyRoute,
  PodcastsPodcastIdLazyRoute,
  PodcastsNewLazyRoute,
  ScriptsScriptIdLazyRoute,
  ScriptsNewLazyRoute,
  UsersUserIdLazyRoute,
  ScriptsIndexRoute,
  PodcastsIndexLazyRoute,
  CornersCornerIdNewMailLazyRoute,
  PodcastsPodcastIdEditLazyRoute,
  ScriptsScriptIdEditLazyRoute,
  PodcastsPodcastIdEpisodesEpisodeIdLazyRoute,
})

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/signin",
        "/tasks",
        "/corners/$cornerId",
        "/podcasts/$podcastId",
        "/podcasts/new",
        "/scripts/$scriptId",
        "/scripts/new",
        "/users/$userId",
        "/scripts/",
        "/podcasts/",
        "/corners/$cornerId/newMail",
        "/podcasts/$podcastId/edit",
        "/scripts/$scriptId/edit",
        "/podcasts/$podcastId/episodes/$episodeId"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/signin": {
      "filePath": "signin.lazy.tsx"
    },
    "/tasks": {
      "filePath": "tasks.lazy.tsx"
    },
    "/corners/$cornerId": {
      "filePath": "corners/$cornerId.lazy.tsx"
    },
    "/podcasts/$podcastId": {
      "filePath": "podcasts/$podcastId.lazy.tsx"
    },
    "/podcasts/new": {
      "filePath": "podcasts/new.lazy.tsx"
    },
    "/scripts/$scriptId": {
      "filePath": "scripts/$scriptId.lazy.tsx"
    },
    "/scripts/new": {
      "filePath": "scripts/new.lazy.tsx"
    },
    "/users/$userId": {
      "filePath": "users/$userId.lazy.tsx"
    },
    "/scripts/": {
      "filePath": "scripts/index.tsx"
    },
    "/podcasts/": {
      "filePath": "podcasts/index.lazy.tsx"
    },
    "/corners/$cornerId/newMail": {
      "filePath": "corners/$cornerId_/newMail.lazy.tsx"
    },
    "/podcasts/$podcastId/edit": {
      "filePath": "podcasts/$podcastId_/edit.lazy.tsx"
    },
    "/scripts/$scriptId/edit": {
      "filePath": "scripts/$scriptId_/edit.lazy.tsx"
    },
    "/podcasts/$podcastId/episodes/$episodeId": {
      "filePath": "podcasts/$podcastId_/episodes/$episodeId.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
